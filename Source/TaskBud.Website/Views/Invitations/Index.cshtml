@using TaskBud.Business.Models.Invitations

@model VMInvitationIndex

@{
    ViewData["Title"] = "Invitations";
}

<div class="w-100 d-inline-flex justify-content-end align-items-end">
    <h1 class="flex-grow-1 flex-shrink-1">Invitations</h1>
    <div class="">
        @if (Model.ShowHidden)
        {
            <a asp-action="Index" asp-route-showHidden="false" class="btn btn-sm btn-warning flex-grow-0 flex-shrink-0"><i class="fa fa-fw fa-eye"></i></a>
        }
        else
        {
            <a asp-action="Index" asp-route-showHidden="true" class="btn btn-sm btn-warning flex-grow-0 flex-shrink-0"><i class="fa fa-fw fa-eye-slash"></i></a>
        }
        <button id="add-new-btn" type="button" class="btn btn-sm btn-success flex-grow-0 flex-shrink-0"><i class="fa fa-fw fa-plus-circle"></i></button>
    </div>
</div>

<br />

<table class="table table-striped table-bordered table-hover">
    <thead class="thead-dark">
        <tr>
            <th>Id</th>
            <th>Status</th>
            <th>Invitation Link</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="invitation-grid-body">
        @for (var n = 0; n < Model.Invitations.Count(); n++)
        {
            @Html.DisplayFor(m => m.Invitations[n])
        }
    </tbody>
</table>

<script>
    window.addEventListener('DOMContentLoaded', onLoad);

    function onLoad() {
        var addBtn = document.getElementById("add-new-btn");
        addBtn.onclick = onAdd;

        document.querySelectorAll("[data-type='actions']").forEach(setupActions);
    }

    function onAdd() {
        var url = "@(Url.Action("New"))";


        fetch(url, { method: 'post' })
            .then(response => response.text())
            .then(insertRow);
    }

    function insertRow(html) {
        var gridBody = document.getElementById("invitation-grid-body");
        gridBody.insertAdjacentHTML('beforeend', html);

        var actions = gridBody.lastElementChild.querySelector("[data-type='actions']");
        setupActions(actions);
    }

    function replaceRow(row, html) {
        row.insertAdjacentHTML('afterend', html);
        var newRow = row.nextElementSibling;
        row.remove();

        var actions = newRow.querySelector("[data-type='actions']");
        setupActions(actions);
    }

    function setupActions(actions) {
        var code = actions.getAttribute("data-target");
        var expireBtn = actions.querySelector("[data-type='expire'");
        if (expireBtn) {
            expireBtn.onclick = () => onExpire(code);
        }
    }

    function onExpire(code) {
        var row = document.querySelector("[data-id='" + code + "']");
        var url = "@(Url.Action("Expire", new {code = "REPLACEME"}))";
        url = url.replace("REPLACEME", code);

        fetch(url, { method: 'post' })
            .then(response => response.text())
            .then(html => replaceRow(row, html));
    }

    function onCopy(sender) {
        var targetId = sender.getAttribute("data-target");
        var target = document.getElementById(targetId);
        target.select();
        target.setSelectionRange(0, 99999); /*For mobile devices*/
        document.execCommand("copy");

        sender.innerHTML = "Copied!";
    }
</script>